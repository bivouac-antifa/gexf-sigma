{"version":3,"sources":["GraphViewer/SigmaSettings.js","GraphViewer/FilterControls.js","GraphViewer/ForceLinkControls.js","GraphViewer/DagreControls.js","GraphViewer/index.js","index.js"],"names":["sigma","settings","refresh","initialValues","size","lessThan","greaterThanOrEqualTo","onSubmit","otherProps","handleSubmit","handleChange","values","Form","onChange","debounce","Group","Label","Control","type","name","value","min","step","linLogMode","adjustSizes","barnesHutTheta","barnesHutOptimize","edgeWeightInfluence","iterationsPerRender","outboundAttractionDistribution","scalingRatio","strongGravityMode","slowDown","gravity","alignNodeSiblings","nodeSiblingsScale","nodeSiblingsAngleMin","worker","directed","multigraph","compound","rankDir","ORDERING_MAP","Dagre","ForceControls","Check","inline","checked","ForceComponent","ForceLink","gexfUrl","sigmaRef","useRef","useState","width","height","graphCardDimensions","setGraphCardDimensions","nodesQuery","setNodesQuery","undefined","selectedNode","setSelectedNode","forceConfig","setForceConfig","selectedAlgorithm","setSelectedAlgorithm","defaultNodeColor","defaultEdgeColor","defaultLabelColor","drawNodes","setDrawNodes","drawEdges","setDrawEdges","drawLabels","setDrawLabels","useMemo","nodeColor","edgeColor","labelSize","labelThreshold","defaultLabelSize","batchEdgesDrawing","onMouseoverNode","useCallback","data","node","id","onMouseoutNode","onChangeDrawNodes","target","onChangeDrawEdges","onChangeDrawLabels","onSelectAlgorithm","onSubmitForceConfig","onSubmitFilter","onResizeSigmaCard","contentRect","bounds","Container","fluid","className","Row","Col","xs","ListGroup","Item","FilterControls","as","Object","keys","map","algorithm","Card","Body","onResize","measureRef","ref","renderer","style","onOverNode","onOutNode","default","SigmaSettings","path","neighborsOf","nodesBy","pursuit","initialSize","render","StrictMode","Tabs","defaultActiveKey","Tab","mountOnEnter","eventKey","title","document","getElementById"],"mappings":"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","file":"static/js/main.a0bd78af.chunk.js","sourcesContent":["export default ({ sigma, settings }) => {\n  sigma.settings(settings)\n  sigma.refresh()\n  return null\n}\n","import debounce from 'lodash/debounce'\n\nimport React from 'react'\n\nimport Form from 'react-bootstrap/Form'\n\nimport { Formik } from 'formik'\n\nconst initialValues = {\n  size: {\n    lessThan: 500,\n    greaterThanOrEqualTo: 0,\n  }\n}\n\nexport default ({ onSubmit, ...otherProps }) => {\n  return (\n    <Formik initialValues={{...initialValues}} onSubmit={onSubmit}>\n      {({ handleSubmit, handleChange, values }) => {\n        return (\n          <Form {...otherProps} onChange={debounce(handleSubmit, 666)}>\n            <Form.Group>\n              <Form.Label>Size Range</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"size.greaterThanOrEqualTo\"\n                value={values.size.greaterThanOrEqualTo}\n                min=\"0\"\n                step=\"10\"\n                onChange={handleChange}\n              />\n              <Form.Control\n                type=\"number\"\n                name=\"size.lessThan\"\n                value={values.size.lessThan}\n                min=\"0\"\n                step=\"10\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n","import React from 'react'\n\nimport Form from 'react-bootstrap/Form'\n\nimport { Formik } from 'formik'\n\nconst initialValues = {\n  linLogMode: true,\n  adjustSizes: false,\n  barnesHutTheta: 0.5,\n  barnesHutOptimize: false,\n  edgeWeightInfluence: 0,\n  iterationsPerRender: 1,\n  outboundAttractionDistribution: false,\n  scalingRatio: 1,\n  strongGravityMode: false,\n  slowDown: 1,\n  gravity: 1,\n  alignNodeSiblings: false,\n  nodeSiblingsScale: 1,\n  nodeSiblingsAngleMin: 0,\n  worker: true,\n}\n\nexport default ({ onSubmit, ...otherProps }) => {\n  return (\n    <Formik initialValues={{...initialValues}} onSubmit={onSubmit}>\n      {({ handleSubmit, handleChange, values }) => {\n        return (\n          <Form {...otherProps} onChange={handleSubmit}>\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"linLogMode\"\n                  checked={values.linLogMode}\n                  onChange={handleChange}\n                />\n                <span>linLogMode</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"adjustSizes\"\n                  checked={values.adjustSizes}\n                  onChange={handleChange}\n                />\n                <span>adjustSizes</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"barnesHutOptimize\"\n                  checked={values.barnesHutOptimize}\n                  onChange={handleChange}\n                />\n                <span>barnesHutOptimize</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>barnesHutTheta</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"barnesHutTheta\"\n                value={values.barnesHutTheta}\n                min=\"0\"\n                step=\"0.1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>edgeWeightInfluence</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"edgeWeightInfluence\"\n                value={values.edgeWeightInfluence}\n                min=\"0\"\n                step=\"0.1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>iterationsPerRender</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"iterationsPerRender\"\n                value={values.iterationsPerRender}\n                min=\"0\"\n                step=\"1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"outboundAttractionDistribution\"\n                  checked={values.outboundAttractionDistribution}\n                  onChange={handleChange}\n                />\n                <span>outboundAttractionDistribution</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>scalingRatio</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"scalingRatio\"\n                value={values.scalingRatio}\n                min=\"0\"\n                step=\"0.1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"strongGravityMode\"\n                  checked={values.strongGravityMode}\n                  onChange={handleChange}\n                />\n                <span>strongGravityMode</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>slowDown</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"slowDown\"\n                value={values.slowDown}\n                min=\"0\"\n                step=\"1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>gravity</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"gravity\"\n                value={values.gravity}\n                min=\"0\"\n                step=\"0.1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"alignNodeSiblings\"\n                  checked={values.alignNodeSiblings}\n                  onChange={handleChange}\n                />\n                <span>alignNodeSiblings</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>nodeSiblingsScale</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"nodeSiblingsScale\"\n                value={values.nodeSiblingsScale}\n                min=\"0\"\n                step=\"0.1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>nodeSiblingsAngleMin</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"nodeSiblingsAngleMin\"\n                value={values.nodeSiblingsAngleMin}\n                min=\"0\"\n                step=\"1\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"worker\"\n                  checked={values.worker}\n                  onChange={handleChange}\n                />\n                <span>worker</span>\n              </Form.Label>\n            </Form.Group>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n","import React from 'react'\n\nimport Form from 'react-bootstrap/Form'\n\nimport { Formik } from 'formik'\n\nconst initialValues = {\n  directed: true,\n  multigraph: false,\n  compound: true,\n  rankDir: 'TB', // [\"TB\", \"BT\", \"RL\", \"LR\"]\n}\n\nexport default ({ onSubmit, ...otherProps }) => {\n  return (\n    <Formik initialValues={{...initialValues}} onSubmit={onSubmit}>\n      {({ handleSubmit, handleChange, values }) => {\n        return (\n          <Form {...otherProps} onChange={handleSubmit}>\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"directed\"\n                  checked={values.directed}\n                  onChange={handleChange}\n                />\n                <span>directed</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"multigraph\"\n                  checked={values.multigraph}\n                  onChange={handleChange}\n                />\n                <span>multigraph</span>\n              </Form.Label>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>\n                <Form.Check\n                  inline\n                  type=\"switch\"\n                  name=\"compound\"\n                  checked={values.compound}\n                  onChange={handleChange}\n                />\n                <span>compound</span>\n              </Form.Label>\n            </Form.Group>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n","import pursuit from 'pursuit'\n\nimport React, { useRef, useState, useEffect, useMemo, useCallback } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nimport SigmaSettings from './SigmaSettings'\n\nimport {\n  Sigma,\n  Filter,\n  LoadGEXF,\n  DragNodes,\n  EdgeShapes,\n  NodeShapes,\n  RelativeSize,\n  SigmaEnableWebGL,\n} from 'react-sigma'\n\nimport Measure from 'react-measure'\n\nimport FilterControls from './FilterControls'\n\nimport ForceLink from 'react-sigma/lib/ForceLink'\nimport ForceLinkControls from './ForceLinkControls'\n\nimport Dagre from 'react-sigma/lib/Dagre'\nimport DagreControls from './DagreControls'\n\nimport './index.scss'\n\nconst ORDERING_MAP = {\n  Dagre: {\n    ForceControls: DagreControls,\n    ForceComponent: Dagre\n  },\n  ForceLink: {\n    ForceControls: ForceLinkControls,\n    ForceComponent: ForceLink\n  },\n}\n\nexport default ({ gexfUrl }) => {\n  const sigmaRef = useRef()\n\n  const [ graphCardDimensions, setGraphCardDimensions ] = useState({ width: 0, height: 0 })\n\n  const [ nodesQuery, setNodesQuery ] = useState({})\n  const [ selectedNode, setSelectedNode ] = useState(undefined)\n\n  const [ forceConfig, setForceConfig ] = useState({})\n  const [ selectedAlgorithm, setSelectedAlgorithm ] = useState(undefined)\n\n  const [ defaultNodeColor, setDefaultNodeColor] = useState('#000')\n  const [ defaultEdgeColor, setDefaultEdgeColor] = useState('#f00')\n  const [ defaultLabelColor, setDefaultLabelColor ] = useState('#fff')\n\n  const [ drawNodes, setDrawNodes ] = useState(true)\n  const [ drawEdges, setDrawEdges ] = useState(true)\n  const [ drawLabels, setDrawLabels ] = useState(false)\n\n  // useEffect(() => {\n  //   console.log(sigmaRef.current.sigma)\n  // }, [ sigmaRef ])\n\n  const {\n    ForceControls,\n    ForceComponent\n  } = useMemo(() => {\n    if (!selectedAlgorithm) return {}\n    if (!ORDERING_MAP[selectedAlgorithm]) return {}\n    return ORDERING_MAP[selectedAlgorithm]\n  }, [ selectedAlgorithm ])\n\n  const settings = useMemo(() => ({\n    nodeColor: 'default',\n    edgeColor: 'default',\n    labelSize: 'fixed',\n    labelThreshold: 5,\n    defaultLabelSize: 15,\n    batchEdgesDrawing: true,\n    drawNodes,\n    drawEdges,\n    drawLabels,\n    defaultNodeColor,\n    defaultEdgeColor,\n    defaultLabelColor,\n  }), [\n    drawNodes,\n    drawEdges,\n    drawLabels,\n    defaultNodeColor,\n    defaultEdgeColor,\n    defaultLabelColor,\n  ])\n\n  const onMouseoverNode = useCallback(({ data }) => {\n    setSelectedNode(data.node.id)\n  }, [ setSelectedNode ])\n\n  const onMouseoutNode = useCallback(() => {\n    setSelectedNode(undefined)\n  }, [ setSelectedNode ])\n\n  const onChangeDrawNodes = useCallback(({ target }) => {\n    setDrawNodes(target.checked)\n  }, [ setDrawNodes ])\n\n  const onChangeDrawEdges = useCallback(({ target }) => {\n    setDrawEdges(target.checked)\n  }, [ setDrawEdges ])\n\n  const onChangeDrawLabels = useCallback(({ target }) => {\n    setDrawLabels(target.checked)\n  }, [ setDrawLabels ])\n\n  const onSelectAlgorithm = useCallback(({ target }) => {\n    setSelectedAlgorithm(target.value)\n  }, [ setSelectedAlgorithm ])\n\n  const onSubmitForceConfig = useCallback(forceConfig => {\n    setForceConfig(forceConfig)\n  }, [ setForceConfig ])\n\n  const onSubmitFilter = useCallback(nodesQuery => {\n    setNodesQuery(nodesQuery)\n  }, [ setNodesQuery ])\n\n  const onResizeSigmaCard = useCallback(contentRect => {\n    setGraphCardDimensions(contentRect.bounds)\n  }, [ setGraphCardDimensions ])\n\n  return (\n    <Container fluid className=\"graph-viewer p-3\">\n      <Row>\n        <Col xs={3}>\n          <ListGroup>\n            <ListGroup.Item className=\"d-flex align-items-center\">\n              <Form.Group className=\"m-0\">\n                <Form.Label>\n                  <Form.Check inline\n                    type=\"switch\"\n                    checked={drawNodes}\n                    onChange={onChangeDrawNodes}\n                  />\n                  <span>Draw Nodes</span>\n                </Form.Label>\n              </Form.Group>\n            </ListGroup.Item>\n\n            <ListGroup.Item className=\"d-flex \">\n              <Form.Group className=\"m-0\">\n                <Form.Label>\n                  <Form.Check inline\n                    type=\"switch\"\n                    checked={drawEdges}\n                    onChange={onChangeDrawEdges}\n                  />\n                  <span>Draw Edges</span>\n                </Form.Label>\n              </Form.Group>\n            </ListGroup.Item>\n\n            <ListGroup.Item className=\"d-flex \">\n              <Form.Group className=\"m-0\">\n                <Form.Label>\n                  <Form.Check inline\n                    type=\"switch\"\n                    checked={drawLabels}\n                    onChange={onChangeDrawLabels}\n                  />\n                  <span>Draw Labels</span>\n                </Form.Label>\n              </Form.Group>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <FilterControls onSubmit={onSubmitFilter} />\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <Form>\n                <Form.Group className=\"m-0\">\n                  <Form.Label>Sorting</Form.Label>\n                  <Form.Control as=\"select\" onChange={onSelectAlgorithm}>\n                    <option>Select an Algorithm</option>\n                    {Object.keys(ORDERING_MAP).map(algorithm => (\n                      <option key={`algorithm-${algorithm}`} value={algorithm}>\n                        {algorithm}\n                      </option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n              </Form>\n            </ListGroup.Item>\n\n            {ForceControls ? (\n              <ListGroup.Item>\n                <ForceControls onSubmit={onSubmitForceConfig} />\n              </ListGroup.Item>\n            ) : null}\n          </ListGroup>\n        </Col>\n\n        <Col xs={9}>\n          <Card className=\"sigma-card\">\n            <Card.Body className=\"p-0\">\n              <Measure bounds onResize={onResizeSigmaCard}>\n                {({ measureRef }) => (\n                  <div ref={measureRef} className=\"sigma-wrapper\">\n                    <Sigma ref={sigmaRef}\n                      renderer=\"canvas\"\n                      style={{ height: graphCardDimensions.height }}\n                      onOverNode={onMouseoverNode}\n                      onOutNode={onMouseoutNode}\n                    >\n                      <EdgeShapes default=\"curvedArrow\" />\n                      <SigmaSettings settings={settings} />\n\n                      <LoadGEXF path={gexfUrl}>\n                        { selectedNode ? (\n                          <Filter neighborsOf={selectedNode} />\n                        ) : (\n                          <Filter nodesBy={pursuit(nodesQuery)} />\n                        ) }\n\n                        { ForceComponent ? (\n                          <ForceComponent {...forceConfig}>\n                            <DragNodes />\n                          </ForceComponent>\n                        ) : (\n                          <DragNodes />\n                        ) }\n\n                        <RelativeSize initialSize={10} />\n                      </LoadGEXF>\n                    </Sigma>\n                  </div>\n                )}\n              </Measure>\n            </Card.Body>\n          </Card>\n        </Col>\n\n      </Row>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { render } from 'react-dom'\n\nimport Tab from 'react-bootstrap/Tab'\nimport Tabs from 'react-bootstrap/Tabs'\n\nimport GraphViewer from './GraphViewer'\n\nimport './index.scss'\n\nrender((\n  <React.StrictMode>\n    <Tabs defaultActiveKey=\"telegram\">\n      <Tab mountOnEnter className=\"position-relative\" eventKey=\"telegram\" title=\"Telegram\">\n        <GraphViewer gexfUrl=\"./gephi/telegram.gexf\" />\n      </Tab>\n    </Tabs>\n  </React.StrictMode>\n), document.getElementById('root'))\n"],"sourceRoot":""}